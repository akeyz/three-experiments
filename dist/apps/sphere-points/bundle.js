/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	var SCREEN_WIDTH = window.innerWidth;
	var SCREEN_HEIGHT = window.innerHeight;
	var VIEW_ANGLE = 45;
	var ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;
	var NEAR = 1;
	var FAR = 10000;
	
	var scene = void 0;
	var camera = void 0;
	var renderer = void 0;
	var axisHelper = void 0;
	var gridHelper = void 0;
	var geometry = void 0;
	var material = void 0;
	var mesh = void 0;
	var controls = void 0;
	var pointLight = void 0;
	var ambientLight = void 0;
	
	var origin = new THREE.Vector3(0, 0, 0);
	
	function init() {
	  scene = new THREE.Scene();
	
	  gridHelper = new THREE.GridHelper(100, 10);
	  scene.add(gridHelper);
	
	  axisHelper = new THREE.AxisHelper(100);
	  scene.add(axisHelper);
	
	  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
	  camera.position.set(200, 200, 200);
	  camera.lookAt(origin);
	
	  geometry = new THREE.SphereGeometry(1, 32, 32);
	  material = new THREE.MeshLambertMaterial({ color: 0xffffff });
	
	  // https://en.wikipedia.org/wiki/Spherical_coordinate_system
	  // http://stackoverflow.com/questions/969798/plotting-a-point-on-the-edge-of-a-sphere
	
	  var radius = 100;
	  var intervals = 10;
	
	  // phi is the angle on the xy plane
	  // [0, 2PI]
	  var phi0 = Math.PI * (0 / 4);
	  var phi1 = Math.PI * (2 / 4);
	  var phiDelta = (phi1 - phi0) / intervals;
	
	  // theta is the angle from the z axis
	  // [0, PI]
	  var theta0 = Math.PI * (0 / 2);
	  var theta1 = Math.PI * (2 / 4);
	  var thetaDelta = (theta1 - theta0) / intervals;
	
	  // let count = 0;
	  for (var phi = phi0; phi <= phi1; phi += phiDelta) {
	    for (var theta = theta0; theta <= theta1; theta += thetaDelta) {
	      // count += 1;
	      // console.log(count);
	      var x = radius * Math.sin(theta) * Math.cos(phi);
	      var y = radius * Math.sin(theta) * Math.sin(phi);
	      var z = radius * Math.cos(theta);
	      mesh = new THREE.Mesh(geometry, material);
	      mesh.position.set(x, y, z);
	      scene.add(mesh);
	    }
	  }
	
	  ambientLight = new THREE.AmbientLight(0x444444);
	  scene.add(ambientLight);
	
	  pointLight = new THREE.PointLight(0xffffff, 1, 1000);
	  pointLight.position.set(50, 50, 50);
	  scene.add(pointLight);
	
	  renderer = new THREE.WebGLRenderer();
	  renderer.setSize(window.innerWidth, window.innerHeight);
	
	  controls = new THREE.OrbitControls(camera, renderer.domElement);
	
	  THREEx.WindowResize(renderer, camera);
	
	  document.body.appendChild(renderer.domElement);
	}
	
	function animate() {
	  requestAnimationFrame(animate);
	  controls.update();
	  renderer.render(scene, camera);
	}
	
	init();
	animate();

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYzlkNTg2NGI1YWFkNzBmNTRiOWM/ZDdhMyoqKioqIiwid2VicGFjazovLy8uL3NyYy9hcHBzL3NwaGVyZS1wb2ludHMvaW5kZXguanMiXSwibmFtZXMiOlsiU0NSRUVOX1dJRFRIIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIlNDUkVFTl9IRUlHSFQiLCJpbm5lckhlaWdodCIsIlZJRVdfQU5HTEUiLCJBU1BFQ1QiLCJORUFSIiwiRkFSIiwic2NlbmUiLCJjYW1lcmEiLCJyZW5kZXJlciIsImF4aXNIZWxwZXIiLCJncmlkSGVscGVyIiwiZ2VvbWV0cnkiLCJtYXRlcmlhbCIsIm1lc2giLCJjb250cm9scyIsInBvaW50TGlnaHQiLCJhbWJpZW50TGlnaHQiLCJvcmlnaW4iLCJUSFJFRSIsIlZlY3RvcjMiLCJpbml0IiwiU2NlbmUiLCJHcmlkSGVscGVyIiwiYWRkIiwiQXhpc0hlbHBlciIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwicG9zaXRpb24iLCJzZXQiLCJsb29rQXQiLCJTcGhlcmVHZW9tZXRyeSIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJjb2xvciIsInJhZGl1cyIsImludGVydmFscyIsInBoaTAiLCJNYXRoIiwiUEkiLCJwaGkxIiwicGhpRGVsdGEiLCJ0aGV0YTAiLCJ0aGV0YTEiLCJ0aGV0YURlbHRhIiwicGhpIiwidGhldGEiLCJ4Iiwic2luIiwiY29zIiwieSIsInoiLCJNZXNoIiwiQW1iaWVudExpZ2h0IiwiUG9pbnRMaWdodCIsIldlYkdMUmVuZGVyZXIiLCJzZXRTaXplIiwiT3JiaXRDb250cm9scyIsImRvbUVsZW1lbnQiLCJUSFJFRXgiLCJXaW5kb3dSZXNpemUiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7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ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGM5ZDU4NjRiNWFhZDcwZjU0YjljIiwiY29uc3QgU0NSRUVOX1dJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG5jb25zdCBTQ1JFRU5fSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuY29uc3QgVklFV19BTkdMRSA9IDQ1O1xuY29uc3QgQVNQRUNUID0gU0NSRUVOX1dJRFRIIC8gU0NSRUVOX0hFSUdIVDtcbmNvbnN0IE5FQVIgPSAxO1xuY29uc3QgRkFSID0gMTAwMDA7XG5cbmxldCBzY2VuZTtcbmxldCBjYW1lcmE7XG5sZXQgcmVuZGVyZXI7XG5sZXQgYXhpc0hlbHBlcjtcbmxldCBncmlkSGVscGVyO1xubGV0IGdlb21ldHJ5O1xubGV0IG1hdGVyaWFsO1xubGV0IG1lc2g7XG5sZXQgY29udHJvbHM7XG5sZXQgcG9pbnRMaWdodDtcbmxldCBhbWJpZW50TGlnaHQ7XG5cbmNvbnN0IG9yaWdpbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXG4gIGdyaWRIZWxwZXIgPSBuZXcgVEhSRUUuR3JpZEhlbHBlcigxMDAsIDEwKTtcbiAgc2NlbmUuYWRkKGdyaWRIZWxwZXIpO1xuXG4gIGF4aXNIZWxwZXIgPSBuZXcgVEhSRUUuQXhpc0hlbHBlcigxMDApO1xuICBzY2VuZS5hZGQoYXhpc0hlbHBlcik7XG5cbiAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFZJRVdfQU5HTEUsIEFTUEVDVCwgTkVBUiwgRkFSKTtcbiAgY2FtZXJhLnBvc2l0aW9uLnNldCgyMDAsIDIwMCwgMjAwKTtcbiAgY2FtZXJhLmxvb2tBdChvcmlnaW4pO1xuXG4gIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEsIDMyLCAzMik7XG4gIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZmYgfSk7XG5cbiAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BoZXJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTY5Nzk4L3Bsb3R0aW5nLWEtcG9pbnQtb24tdGhlLWVkZ2Utb2YtYS1zcGhlcmVcblxuICBjb25zdCByYWRpdXMgPSAxMDA7XG4gIGNvbnN0IGludGVydmFscyA9IDEwO1xuXG4gIC8vIHBoaSBpcyB0aGUgYW5nbGUgb24gdGhlIHh5IHBsYW5lXG4gIC8vIFswLCAyUEldXG4gIGNvbnN0IHBoaTAgPSBNYXRoLlBJICogKDAgLyA0KTtcbiAgY29uc3QgcGhpMSA9IE1hdGguUEkgKiAoMiAvIDQpO1xuICBjb25zdCBwaGlEZWx0YSA9IChwaGkxIC0gcGhpMCkgLyBpbnRlcnZhbHM7XG5cbiAgLy8gdGhldGEgaXMgdGhlIGFuZ2xlIGZyb20gdGhlIHogYXhpc1xuICAvLyBbMCwgUEldXG4gIGNvbnN0IHRoZXRhMCA9IE1hdGguUEkgKiAoMCAvIDIpO1xuICBjb25zdCB0aGV0YTEgPSBNYXRoLlBJICogKDIgLyA0KTtcbiAgY29uc3QgdGhldGFEZWx0YSA9ICh0aGV0YTEgLSB0aGV0YTApIC8gaW50ZXJ2YWxzO1xuXG4gIC8vIGxldCBjb3VudCA9IDA7XG4gIGZvciAobGV0IHBoaSA9IHBoaTA7IHBoaSA8PSBwaGkxOyBwaGkgKz0gcGhpRGVsdGEpIHtcbiAgICBmb3IgKGxldCB0aGV0YSA9IHRoZXRhMDsgdGhldGEgPD0gdGhldGExOyB0aGV0YSArPSB0aGV0YURlbHRhKSB7XG4gICAgICAvLyBjb3VudCArPSAxO1xuICAgICAgLy8gY29uc29sZS5sb2coY291bnQpO1xuICAgICAgY29uc3QgeCA9IHJhZGl1cyAqIE1hdGguc2luKHRoZXRhKSAqIE1hdGguY29zKHBoaSk7XG4gICAgICBjb25zdCB5ID0gcmFkaXVzICogTWF0aC5zaW4odGhldGEpICogTWF0aC5zaW4ocGhpKTtcbiAgICAgIGNvbnN0IHogPSByYWRpdXMgKiBNYXRoLmNvcyh0aGV0YSk7XG4gICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgIG1lc2gucG9zaXRpb24uc2V0KHgsIHksIHopO1xuICAgICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgIH1cbiAgfVxuXG4gIGFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHg0NDQ0NDQpO1xuICBzY2VuZS5hZGQoYW1iaWVudExpZ2h0KTtcblxuICBwb2ludExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYsIDEsIDEwMDApO1xuICBwb2ludExpZ2h0LnBvc2l0aW9uLnNldCg1MCwgNTAsIDUwKTtcbiAgc2NlbmUuYWRkKHBvaW50TGlnaHQpO1xuXG4gIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcbiAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblxuICBjb250cm9scyA9IG5ldyBUSFJFRS5PcmJpdENvbnRyb2xzKGNhbWVyYSwgcmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgVEhSRUV4LldpbmRvd1Jlc2l6ZShyZW5kZXJlciwgY2FtZXJhKTtcblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIGNvbnRyb2xzLnVwZGF0ZSgpO1xuICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG59XG5cbmluaXQoKTtcbmFuaW1hdGUoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcHBzL3NwaGVyZS1wb2ludHMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9